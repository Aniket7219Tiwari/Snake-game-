using snake_game;
using System.Reflection.Metadata.Ecma335;

coord gridDimensions = new coord(50, 20);

coord snakepos = new coord(10, 1);

Random rand = new Random();
coord applepos = new coord(rand.Next(1, gridDimensions.X - 1), rand.Next(1, gridDimensions.Y - 1));

int frameDelayMilli = 100;

direction movementDirection = direction.down;

int score = 0;

List<coord> snakePostHistory = new List<coord>();
int tailLength = 1;

while (true)
{
    Console.Clear();
    Console.WriteLine("score:" + score);
    snakepos.ApplyMovementDirection(movementDirection);

   for (int y= 0; y < gridDimensions.Y; y++)
   {
      for(int x = 0; x< gridDimensions.X; x++)
      {
        coord currentcoord = new coord(x, y);

        if (snakepos.Equals(currentcoord) || snakePostHistory.Contains(currentcoord))
            Console.Write("â– ");

        else if (applepos.Equals(currentcoord))
            Console.Write("a");

        else if (x == 0 || y == 0 || x == gridDimensions.X - 1 || y == gridDimensions.Y - 1)
            Console.Write("#");

        else
            Console.Write(" ");
      }
        Console.WriteLine();
   }

    if (snakepos.Equals(applepos))
    {
        tailLength++;
        score++;
        applepos = new coord(rand.Next(1, gridDimensions.X - 1), rand.Next(1, gridDimensions.Y - 1));
    }
    else if (snakepos.X==0 || snakepos.Y == 0|| 
        snakepos.X== gridDimensions.X-1||snakepos.Y == gridDimensions.Y - 1||snakePostHistory.Contains(snakepos))
    {
        score = 0;
        tailLength = 0;
        snakepos = new coord(10, 1);
        snakePostHistory.Clear();
        movementDirection = direction.down;
        continue;
    }


        snakePostHistory.Add(new coord(snakepos.X, snakepos.Y));

    if (snakePostHistory.Count > tailLength)
        snakePostHistory.RemoveAt(0);


    DateTime time = DateTime.Now;

    while((DateTime.Now - time).Milliseconds < frameDelayMilli)
    {
        if (Console.KeyAvailable)
        {
            ConsoleKey key = Console.ReadKey().Key;

            switch (key)
            {
                case ConsoleKey.LeftArrow:
                    movementDirection = direction.left;
                    break;
                case ConsoleKey.RightArrow:
                    movementDirection = direction.right;
                    break;
                case ConsoleKey.UpArrow:
                    movementDirection = direction.up;
                    break;
                case ConsoleKey.DownArrow:
                    movementDirection = direction.down;
                    break;


            }
        }
    }
}
